// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant(
    $background,
    $border,
    $hover-background: darken($background, 7.5%),
    $hover-border: darken($border, 10%),
    $active-background: darken($background, 10%),
    $active-border: darken($border, 12.5%)
) {
    color: color-yiq($background);
    @include gradient-bg($background);
    border-color: $border;
    @include box-shadow($btn-box-shadow);

    @include hover {
        color: color-yiq($hover-background);
        @include gradient-bg($hover-background);
        border-color: $hover-border;
    }

    &:focus,
    &.focus {
        // Avoid using mixin so we can pass custom focus shadow properly
        @if $enable-shadows {
            box-shadow: $btn-box-shadow,
                0
                    0
                    0
                    $btn-focus-width
                    rgba(mix(color-yiq($background), $border, 15%), 0.5);
        } @else {
            box-shadow: 0
                0
                0
                $btn-focus-width
                rgba(mix(color-yiq($background), $border, 15%), 0.5);
        }
    }

    // Disabled comes first so active can properly restyle
    &.disabled,
    &:disabled {
        color: color-yiq($background);
        background-color: $background;
        border-color: $border;
        // Remove CSS gradients if they're enabled
        @if $enable-gradients {
            background-image: none;
        }
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
        color: color-yiq($active-background);
        background-color: $active-background;
        @if $enable-gradients {
            background-image: none; // Remove the gradient for the pressed/active state
        }
        border-color: $active-border;

        &:focus {
            // Avoid using mixin so we can pass custom focus shadow properly
            @if $enable-shadows and $btn-active-box-shadow != none {
                box-shadow: $btn-active-box-shadow,
                    0
                        0
                        0
                        $btn-focus-width
                        rgba(mix(color-yiq($background), $border, 15%), 0.5);
            } @else {
                box-shadow: 0
                    0
                    0
                    $btn-focus-width
                    rgba(mix(color-yiq($background), $border, 15%), 0.5);
            }
        }
    }
}

@mixin button-outline-variant(
    $color,
    $color-hover: color-yiq($color),
    $active-background: $color,
    $active-border: $color
) {
    color: $color;
    border-color: $color;

    @include hover {
        color: $color-hover;
        background-color: $active-background;
        border-color: $active-border;
    }

    &:focus,
    &.focus {
        box-shadow: 0 0 0 $btn-focus-width rgba($color, 0.5);
    }

    &.disabled,
    &:disabled {
        color: $color;
        background-color: transparent;
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
        color: color-yiq($active-background);
        background-color: $active-background;
        border-color: $active-border;

        &:focus {
            // Avoid using mixin so we can pass custom focus shadow properly
            @if $enable-shadows and $btn-active-box-shadow != none {
                box-shadow: $btn-active-box-shadow,
                    0 0 0 $btn-focus-width rgba($color, 0.5);
            } @else {
                box-shadow: 0 0 0 $btn-focus-width rgba($color, 0.5);
            }
        }
    }
}

// Button sizes
@mixin button-size(
    $padding-y,
    $padding-x,
    $font-size,
    $line-height,
    $border-radius
) {
    padding: $padding-y $padding-x;
    @include font-size($font-size);
    line-height: $line-height;
    // Manually declare to provide an override to the browser default
    @include border-radius($border-radius, 0);
}

// Buttons Budges

.btn.btn-primary * {
    fill: #fff;
}
.btn .badge {
    position: relative;
    top: -1px;
}
.btn > span {
    display: inline-block;
    vertical-align: middle;
}

//
//
// buttons.scss
//
//

.btn {
    letter-spacing: -0.02em;
    &.btn-sm {
        letter-spacing: 0;
    }
    > span {
        display: inline-block;
        vertical-align: middle;
    }
    > .icon {
        &:first-child {
            margin-right: 0.5rem;
        }
        &:last-child {
            margin-left: 0.5rem;
        }
        &.d-block {
            margin: 0 auto;
            margin-bottom: 0.75rem;
            height: 2rem;
        }
    }
    &.btn-sm {
        > .icon {
            height: 1rem;
        }
    }
    &:focus {
        box-shadow: none !important;
    }
}

[class*="-flex"] {
    > .btn {
        flex-shrink: 0;
    }
}

@each $name, $color in $theme-colors {
    .btn {
        &.btn-#{$name} {
            * {
                fill: color-yiq($color);
            }
        }
    }
    .btn-outline-#{$name} {
        &:hover {
            * {
                fill: color-yiq($color);
            }
        }
    }
}

.btn-light {
    border-color: $border-color;
    background: $gray-100;
}

.btn-white {
    background: $white;
    color: theme-color("primary");
    > .icon {
        path {
            fill: theme-color("primary");
        }
    }
    &:hover {
        color: theme-color("primary");
        background: rgba(255, 255, 255, 0.9);
    }
}

.btn-outline-white {
    border-color: $border-color;
}

.btn-round {
    border-radius: 50%;
    width: 2.5rem;
    height: 2.5rem;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    > .icon {
        &:only-child {
            margin: 0;
        }
        &.icon-sm {
            height: 1rem;
        }
    }
    &.btn-sm {
        width: 2rem;
        height: 2rem;
    }
    &.btn-lg {
        width: 3.75rem;
        height: 3.75rem;
    }
    &.btn-xlg {
        width: 4.5rem;
        height: 4.5rem;
    }
    &.btn-lg,
    &.btn-xlg {
        > .icon {
            height: 2rem;
        }
    }
}

.btn-loading {
    &:not(.btn-loading-animate) {
        > span {
            vertical-align: baseline;
        }
    }
    .icon {
        display: none;
    }
    &.btn-loading-animate {
        .icon {
            path {
                animation: spin 0.5s infinite linear;
                transform-origin: 12px;
            }
            display: inline-block;
        }
    }
}

@keyframes spin {
    0% {
        transform: rotateZ(0deg);
    }
    100% {
        transform: rotateZ(360deg);
    }
}

// Back to top button

.btn {
    &.back-to-top {
        position: fixed;
        bottom: $spacer;
        right: $spacer;
        z-index: $zindex-sticky;
    }
}
